#!/usr/bin/env node

/**
 * To deploy to a new slug run:
 *
 * $ node /path/to/this/file --slug=foo --version=0.1.0
 */
const { execSync } = require('child_process');

const flags = process.argv.slice(2).reduce((json, input) => {
  const [, flag, value] = input.match(/^--([^=\s]*)=?(.*)/);
  json[flag.toLowerCase()] = value;
  return json;
}, {});

const env = {
  slug: flags.slug || 'baz',
  port: 4200,
  namespace: 'ng-kube-test',
  imagePath: `gcr.io/services-165213/ng-kube-test:${flags.version || '0.0.0'}`,
};

const kubeResources = `
apiVersion: v1
kind: Namespace
metadata:
  name: ${env.namespace}
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: ${env.slug}
  namespace: ${env.namespace}
  labels:
    run: ${env.slug}
spec:
  replicas: 1
  selector:
    matchLabels:
      run: ${env.slug}
  template:
    metadata:
      labels:
        run: ${env.slug}
    spec:
      containers:
      - name: ${env.slug}
        image: ${env.imagePath}
        ports:
        - containerPort: ${env.port}
        livenessProbe:
          httpGet:
            path: /
            port: ${env.port}
          initialDelaySeconds: 120
          periodSeconds: 3
        readinessProbe:
          httpGet:
            path: /
            port: ${env.port}
          initialDelaySeconds: 60
          periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: ${env.slug}
  labels:
    run: ${env.slug}
  namespace: ${env.namespace}
spec:
  ports:
  - port: ${env.port}
    targetPort: ${env.port}
  type: NodePort
  selector:
    run: ${env.slug}
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: ng-test-ingress
  namespace: ${env.namespace}
spec:
  rules:
  - http:
      paths:
      - backend:
          serviceName: ${env.slug}
          servicePort: ${env.port}
        path: /${env.slug}`;

const deploySteps = [
  `docker build -t ${env.imagePath} --build-arg SLUG=${env.slug} .`,
  `docker push ${env.imagePath}`,
  `echo '${kubeResources}' > ./kubetemp.yaml`,
  `kubectl apply -f ./kubetemp.yaml -n=${env.namespace}`,
  `rm ./kubetemp.yaml`,
];

deploySteps.forEach(v => {
  execSync(v, {stdio: 'inherit'});
});

process.exit(1);
